//// Angular recnxt................... /////
1. ang project as library ()
https://nezhar.com/blog/up-and-running-library-development-with-angular-7/
angular.json; projects:{} like my-lib:{}
https://medium.com/@tomsu/how-to-build-a-library-for-angular-apps-4f9b38b0ed11
https://itnext.io/angular-cli-libraries-79b0a32a1443
ng build my-lib --watch
import {my-lib} from 'dist_folder_name'
https://stackoverflow.com/questions/56113034/share-a-angular-library-across-multiple-projects
https://angular.io/guide/creating-libraries
2. snackbar as a service
3. date transform --> pipe
4. environmnet -> .prod.ts, .qa.ts
chnage in angular.json , create as configuarion:production like anothereg. qa:{}
5. 

//// .................... ////
https://stackoverflow.com/questions/54375026/how-to-change-a-materialtable-cell-content-on-click
https://medium.com/javascript-in-plain-english/angular-material-table-with-edit-function-like-excel-7c2c53332553


Hi all, material in angular-concepts cerate -->

Created Snackbar as a service, which is injectable in all components (service is injected in all most components).

Usage:
1.	Create snackbar component
Component:
import { Component, Inject } from '@angular/core';
import { MatSnackBarRef, MAT_SNACK_BAR_DATA } from '@angular/material';

@Component({
  selector: 'app-snackbar',
  templateUrl: './snackbar.component.html'
})
export class SnackbarComponent {
  constructor(
    public snackBarRef: MatSnackBarRef<SnackbarComponent>,
    @Inject(MAT_SNACK_BAR_DATA) public data: any
  ) { }

}

HTML:
<div class="flex">
  <div class="data">{{data}}</div>
  <div class="dismiss">
    <button mat-icon-button (click)="snackBarRef.dismiss()">
      <mat-icon>close</mat-icon>
    </button>
  </div>
</div>

2.	Import in respective module.
3.	In service file:
Service.ts:
//snack bar :)
import { MatSnackBar } from '@angular/material';
import { SnackbarComponent} from '../../shared/components/snackbar/snackbar.component';

constructor(private snackBar: MatSnackBar) { }

  //snack bar method; duration in milliseconds,data is message to display, panelClass is css class from ts
openSnackBar(message: string, panelClass: string) {
  this.snackBar.openFromComponent(SnackbarComponent, {
    data: message,
    panelClass: panelClass,
    duration: 2000
  });
}


4.	Usage in respective component:

      //snack bar success; (message,css panel class)
      this.activityService.openSnackBar('Data Posted Successfully !!! ','success-snack');


5.	CSS:
6.	.mat-snack-bar-container .flex {
7.	  display: flex;
8.	  align-items: baseline;
9.	  justify-content: space-between;
10.	}
11.	
12.	// snack bar successs css
13.	.mat-snack-bar-container.success-snack {
14.	  color: white;
15.	  background-color:green;
16.	}
17.	


genModel
https://medium.com/@mail.bahurudeen/create-a-dynamic-form-with-configurable-fields-and-validations-using-angular-6-994db56834da

css environment
 google keyword (custom environment variables angular)
https://www.jvandemo.com/how-to-use-environment-variables-to-configure-your-angular-application-without-a-rebuild/
https://itnext.io/multi-environment-setup-for-your-angular-app-a211d72f1ff1


ideal angular folder structure
https://itnext.io/choosing-a-highly-scalable-folder-structure-in-angular-d987de65ec7
https://github.com/mathisGarberg/angular-folder-structure

https://itnext.io/choosing-a-highly-scalable-folder-structure-in-angular-d987de65ec7

https://www.earthdatascience.org/workshops/intro-version-control-git/basic-git-commands/

https://stackoverflow.com/questions/4089430/how-can-i-determine-the-url-that-a-local-git-repository-was-originally-cloned-fr

https://stackoverflow.com/questions/47860772/gitlab-remote-http-basic-access-denied-and-fatal-authentication/51036707

git remote add origin https://infygit.ad.infosys.com/Infosys-IT/Infosys-Digital-Features/recnxt/recnxt-ui/taplatform-ui.git

https://blog.angularindepth.com/angular-routing-reusing-common-layout-for-pages-from-different-modules-440a23f86b57
https://stackblitz.com/github/jbojcic1/angular-routing-example/tree/routing-reuse-layout-example-1
https://malcoded.com/posts/angular-fundamentals-modules/
https://medium.com/@shairez/angular-routing-a-better-pattern-for-large-scale-apps-f2890c952a18
https://github.com/gothinkster/angular-realworld-example-app
https://github.com/gothinkster/angular-realworld-example-app?files=1
https://github.com/gothinkster/angular-realworld-example-app/tree/master/src
https://github.com/gothinkster/angular-realworld-example-app/blob/master/src/app/app-routing.module.ts
https://github.com/gothinkster/angular-realworld-example-app/blob/master/src/app/article/article-routing.module.ts
https://github.com/gothinkster/angular-realworld-example-app/tree/master/src/app/article
https://github.com/gothinkster/angular-realworld-example-app/blob/master/src/app/auth/auth-routing.module.ts
https://github.com/gothinkster/angular-realworld-example-app/tree/master/src/app/auth
https://github.com/gothinkster/angular-realworld-example-app/blob/master/src/app/home/home-routing.module.ts
https://github.com/gothinkster/angular-realworld-example-app/tree/master/src/app/home
https://github.com/gothinkster/angular-realworld-example-app/tree/master/src/app
https://github.com/gothinkster/angular-realworld-example-app/tree/master/src/app/shared
https://github.com/gothinkster/angular-realworld-example-app/tree/master/src/app/shared/article-helpers



https://itnext.io/choosing-a-highly-scalable-folder-structure-in-angular-d987de65ec7




https://medium.com/@mail.bahurudeen/create-a-dynamic-form-with-configurable-fields-and-validations-using-angular-6-994db56834da

resolvers
https://denys.dev/2016-11-27/dynamic-content-in-angular/

https://www.google.com/search?q=ideal+angular+project+structure&rlz=1C1GCEA_enIN866IN866&oq=idea&aqs=chrome.1.69i59l2j69i57j0l3.1215j0j9&sourceid=chrome&ie=UTF-8

https://itnext.io/choosing-a-highly-scalable-folder-structure-in-angular-d987de65ec7
https://github.com/mathisGarberg/angular-folder-structure


https://stackoverflow.com/questions/45464245/angular-unexpected-token-a-constructor-method-accessor-or-property-was-expe
https://stackoverflow.com/questions/47732353/why-cant-we-use-the-let-keyword-inside-a-class-in-typescript
refer class vs interface in ts

https://github.com/mgechev/angular-performance-checklist


Difference between let and const?
How to find duplicates in array?
Design pattern in JavaScript?
What is Closure?
What is Event Bubbling?
What is Hosting?
What are the ways to create object in JavaScript?
What is the purpose of ‘this’ keyword?

Interview QnA, angular,js,html&css
prepare

include, local and sessionstoarge in resume and learn from akshay and more
include, data visualization in one project, know how to overide default and everything, pick ypur own visualization



1. ajax
2. fetch https://itnext.io/that-data-looks-so-fetching-on-you-understanding-the-js-fetch-api-880eae0c8d25
async/await/promises
json
console 
data_array_object_access.html
3. cross origin
tree shaking
4. debounce
5. throttling
6. search
7. filtering
8. sorting
9. linked lists
10 graphs
11 trees
12 stack/queue

regex and oops
Algorithms

download and check implmention and how it works, big projects on angular and js

host apps and web apps in github pages, js and angular -> js with sorting filtering,searching ....
angular with forms and ...
    
    
    
    
    function fetchTime() {

        // console.log("apna time ayega");

        var presentLoggedIn = Date.now();
        var lastLoggedIn = presentLoggedIn;
       

        setTimeout(function(){
            if(presentLoggedIn<Date.now()){
            console.log(":inside if:");
            lastLoggedIn = presentLoggedIn;
            presentLoggedIn = Date.now();
            console.log("presentLoggedIn",presentLoggedIn);
            console.log("lastLoggedIn",lastLoggedIn);
          
        }
        },100);
        // console.log(Date.now());
        
        


    }

    fetchTime();
    
    
    change dropdown value based on another dropdown reactjs
    
    <!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>MultiSelect React App</title>
</head>

<body>

    <div id="root"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.4.2/react.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/15.4.2/react-dom.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.21.1/babel.min.js"></script>

<script type="text/babel">
                    class MultiSelect extends React.Component {
                                    constructor(props) {
                                    super(props);
                                    this.state = {

                                        country: '',countryState:'',city:'',
                                        data:[
                                        
                                                  { CountryName: 'India', States: [
                                                                                {
                                                                                StateName:"Maharashtra",
                                                                                Cities:[
                                                                                        "Pune",
                                                                                        "Nagpur",
                                                                                        "Mumbai"
                                                                                        ]
                                                                                },
                                                                                {
                                                                                StateName:"Kerala",
                                                                                Cities:[
                                                                                            "Kochi",
                                                                                            "Munnar"
                                                                                        ]
                                                                                }
                                                                            ]
                                                    },

                                                    { CountryName: 'USA', States: [
                                                                                {
                                                                                StateName:"Texas",
                                                                                Cities:[
                                                                                        "dallas"
                                                                                        ]
                                                                                },
                                                                                {
                                                                                StateName:"FLorida",
                                                                                Cities:[
                                                                                            "jacksonville",
                                                                                            "tallhase"
                                                                                        ]
                                                                                }
                                                                            ]
                                                    },


                                        
                                            
                                        ] // data
                                            
                                        
                                            } // this.state   
                        

                                    this.handleChange1 = this.handleChange1.bind(this);
                                    this.handleChange2 = this.handleChange2.bind(this);
                                    this.handleChange3 = this.handleChange3.bind(this);
                                    this.handleSubmit = this.handleSubmit.bind(this);
                                } 

                                handleChange1(event) {
                                    //console.log(event);
                                    
                                    this.setState({country: event.target.value});
                                    console.log('onchange->',event.target.value);
                                    
                                }

                                handleChange2(event) {
                                    //console.log(event);
                                    
                                    this.setState({countryState: event.target.value});
                                
                                    console.log('onchange->',event.target.value);
                                    
                                }

                                handleChange3(event) {
                                    //console.log(event);
                                   
                                    this.setState({city: event.target.value});
                                    console.log('onchange->',event.target.value);
                                    
                                }

                                handleSubmit(event) {
                                    //console.log(event);
                                    event.preventDefault();
                                    alert('submitted: ' + this.state.country + '' + this.state.countryState + '' + this.state.city );
                                    //event.preventDefault();
                                }

                       render() {
       
                        let { data,country,countryState,city } = this.state;

                        let { cntry } = data;
                        cntry = data.map((cn,indx)=> <option key={indx} value={cn.CountryName}>{cn.CountryName}</option>);

                        let { cntryStates } = cntry;
                        cntryStates = data.map( n =>
                            n.States.map((st,i)=> <option key={i} value={st.StateName}>{st.StateName}</option>)
                        );

                        let { stateCities } = data;
                        stateCities = data.map( n =>
                            n.States.map((st,i)=> <option key={i} value={st.Cities}>{st.Cities}</option>)
                        );

                                    
                        return (

                           <form onSubmit={this.handleSubmit}>

                            <label> Select Country : <select value={country} onChange={this.handleChange1}> 
                                                            
                                                            {
                                                                cntry
                                                            }
                                                      </select>      
                            </label>
                            <label> Select State : <select value={countryState} onChange={this.handleChange2}> 
                                                              
                                    {cntryStates}
                                                       

                                                      </select>      
                            </label>
                            <label> Select City : <select value={city} onChange={this.handleChange3}> 
                                    {stateCities}
                                                              
                                                      </select>      
                            </label> <br /> <br />
                            
                            <input type="submit" value="Submit"/> <br/>
                            <label> you selected:-> 
                             country : <b> {this.state.country} </b> state: <b> {this.state.countryState} </b> city: <b> {this.state.city}</b>
                            </label> <br/> <br/>
                            <label> in json format:->
                                    <p>{JSON.stringify(this.state)}</p>
                            </label>

                           </form> 

                        );
                                } // render
                                                           } // component
            ReactDOM.render(
                <MultiSelect />,
                document.getElementById('root')
            );
</script>
</body>

</html>


..............................
img compress

https://www.npmjs.com/package/ng2-image-compress

https://www.npmjs.com/package/ngx-image-compress

<div>
    
    <label> Upload image here: </label>
    <input type="file" name="pic" accept="image/*" (change)="onFileChange($event)" />



</div>


import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {

  public imgHeight:number;
  public imgWidth:number;
  public imgSize:number;


  onFileChange(e){


    // img size

     this.imgSize = e.target.files[0].size;
    console.log('image size in KBs:->',this.imgSize/1000,'KB');

    // img width and height

    this.imgWidth = e.target.offsetHeight;
    this.imgHeight =  e.target.offsetWidth;
    console.log('width',this.imgWidth,'height',this.imgHeight);
  

  
    

  }
  
}


https://zocada.com/compress-resize-images-javascript-browser/

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>

        <div>
    
                <label> Upload image here: </label>
                <input type="file" name="pic" accept="image/*" onchange="onFileChange(event)" />
            
            
            
            </div>


    <script>

        function onFileChange(e){

            console.log(e);

            let imgFile = e.target.files[0];
            console.log(imgFile);

            const reader = new FileReader();
            reader.readAsDataURL(imgFile);
            const img = new Image();
            img.src = e.target.result; 
            console.log(img.src);

            const elem = document.createElement('canvas');
            elem.width = width;
            elem.height = height;
            
            
        }



    </script>    
    
</body>
</html>

https://stackoverflow.com/questions/2303690/resizing-an-image-in-an-html5-canvas
